set(LINK_LIBS ssl crypto pthread dl cryptopp nacl gcrypt gpg-error botan wolfssl ortools)

add_library(${TARGET_NAME} ../include/CryptoBench/cipher/symmetric_cipher.hpp ../include/CryptoBench/secure_string.hpp cipher/open_ssl_cipher_factory.cpp ../include/CryptoBench/cipher/open_ssl_cipher_factory.hpp ../include/CryptoBench/cipher/cipher_factory.hpp ../include/CryptoBench/random_bytes.hpp cipher/libsodium_cipher_factory.cpp ../include/CryptoBench/cipher/libsodium_cipher_factory.hpp cipher/cryptopp_cipher_factory.cpp ../include/CryptoBench/cipher/cryptopp_cipher_factory.hpp cipher/libgcrypt_cipher_factory.cpp ../include/CryptoBench/cipher/libgcrypt_cipher_factory.hpp ../include/CryptoBench/cipher/cipher_exception.hpp cipher/cipher_exception.cpp cipher/botan_cipher_factory.cpp ../include/CryptoBench/cipher/botan_cipher_factory.hpp ../include/CryptoBench/cipher/wolfcrypt_cipher_factory.hpp cipher/wolfcrypt_cipher_factory.cpp engine.cpp ../include/CryptoBench/engine.hpp cipher/cipher_definitions.cpp ../include/CryptoBench/cipher/cipher_definitions.hpp ../include/CryptoBench/ciphertext_writer.hpp ciphertext_writer.cpp key_manager.cpp ../include/CryptoBench/key_manager.hpp file_utilities.cpp ../include/CryptoBench/file_utilities.hpp hencrypt.cpp ../include/CryptoBench/hencrypt.hpp)
target_link_libraries(${TARGET_NAME} ${LINK_LIBS})
target_include_directories(${TARGET_NAME} PUBLIC ${CMAKE_SOURCE_DIR}/include)
#target_compile_options(${TARGET_NAME} PRIVATE -std=gnu++11)