//
// Created by ISU on 25/06/2020.
//

#include <gtest/gtest.h>

#include <vector>
#include <array>
#include <iostream>

#include <ortools/constraint_solver/constraint_solver.h>
#include <ortools/sat/cp_model.h>
#include <ortools/sat/integer_expr.h>

class OrtoolsFixture : public ::testing::Test
{
protected:

    void SetUp() override
    {
    }

    void TearDown() override
    {
    }

};

TEST_F(OrtoolsFixture, OriginalSatTest)
{
    GTEST_SKIP();
    using namespace operations_research;

    Solver solver("cryptoengine");

    std::array<int, 4> blocks = {1, 2, 3, 4};
    std::array<int, 2> devices = {1, 40};

    using Processor = std::vector<int64>;
    std::vector<Processor> processors = {
            { 13, 8, 5, 5, 5, 5, 5, 5, 5 },
            { 13, 7, 7, 6, 4, 1, 1, 1, 1 }
    };

    // TODO: performance of INF horizon
    int64 horizon = INT64_MAX;

    struct Task {
        IntervalVar * p_interval;
        IntervalVar * io_interval;
        int64 block_len;
    };

    std::vector<IntervalVar*> all_p_intervals;
    std::vector<std::vector<IntervalVar*>> device_tasks(devices.size());
    std::vector<IntervalVar*> all_io_intervals;

    std::vector<std::vector<std::vector<Task>>> all_tasks(processors.size());

    for (int proc_id = 0; proc_id < processors.size(); proc_id++)
    {
        all_tasks[proc_id] = std::vector<std::vector<Task>>(devices.size());
        for (int device_id = 0; device_id < devices.size(); device_id++)
        {
            all_tasks[proc_id][device_id] = std::vector<Task>(blocks.size());
            for (int block_id = 0; block_id < blocks.size(); block_id++)
            {
                std::stringstream ss;
                ss << "_" << block_id << "_" << proc_id << "_" << device_id;
                IntVar *chosen = solver.MakeIntVar(0, 1, "chosen" + ss.str());

                int64 p_time = blocks[block_id] * processors[proc_id][block_id];
                IntVar *p_start = solver.MakeIntVar(0, horizon, "p_start" + ss.str());
                IntervalVar *p_interval = solver.MakeFixedDurationIntervalVar(p_start, p_time, chosen,
                        "p_interval" + ss.str());
                all_p_intervals.push_back(p_interval);

                int64 io_time = blocks[block_id] * devices[device_id];
                IntVar *io_start = solver.MakeIntVar(0, horizon, "io_start" + ss.str());
                IntervalVar *io_interval = solver.MakeFixedDurationIntervalVar(io_start, io_time, chosen,
                        "io_interval" + ss.str());
                device_tasks[device_id].push_back(io_interval);
                all_io_intervals.push_back(io_interval);

                /// Precedence constraint
                solver.AddConstraint(solver.MakeIntervalVarRelation(io_interval, Solver::STARTS_AFTER_END, p_interval));
                all_tasks[proc_id][device_id][block_id] = Task{p_interval, io_interval, blocks[block_id]};
            }
        }
    }

    std::vector<SequenceVar*> p_sequences;
    auto p_no_overlap = solver.MakeDisjunctiveConstraint(all_p_intervals, "no_overlap_p_task");
    solver.AddConstraint(p_no_overlap);
    p_sequences.push_back(p_no_overlap->MakeSequenceVar());

    std::vector<std::vector<SequenceVar*>> io_sequences(devices.size());
    for (int device_id = 0; device_id < devices.size(); device_id++)
    {
        auto no_overlap = solver.MakeDisjunctiveConstraint(device_tasks[device_id], "no_overlap_io_" + std::to_string(device_id));
        solver.AddConstraint(no_overlap);
        io_sequences[device_id].push_back(no_overlap->MakeSequenceVar());
    }

    std::vector<IntVar*> all_ends;
    for (auto &io_interval : all_io_intervals)
    {
        all_ends.push_back(io_interval->EndExpr()->Var());
    }
    IntVar * obj_var = solver.MakeMax(all_ends)->Var();
    OptimizeVar * objective_monitor = solver.MakeMinimize(obj_var, 1);

    std::vector<DecisionBuilder*> all_decisions;
    all_decisions.push_back(solver.MakePhase(p_sequences, Solver::SEQUENCE_DEFAULT));
    for (int device_id = 0; device_id < devices.size(); device_id++)
        all_decisions.push_back(solver.MakePhase(io_sequences[device_id], Solver::SEQUENCE_DEFAULT));
    all_decisions.push_back(solver.MakePhase(obj_var, Solver::CHOOSE_FIRST_UNBOUND, Solver::ASSIGN_MIN_VALUE));
    DecisionBuilder * main_phase = solver.Compose(all_decisions);

    const int kLogFreq = 1000000;
    SearchMonitor * search_log = solver.MakeSearchLog(kLogFreq, objective_monitor);

    SearchLimit * limit = nullptr;

    SolutionCollector * collector = solver.MakeLastSolutionCollector();
    collector->AddObjective(obj_var);
    for (auto &sequence : p_sequences)
    {
        for (int i = 0; i < sequence->size(); i++)
        {
            auto interval = sequence->Interval(i);
            collector->Add(interval);
        }
    }
    for (int device_id = 0; device_id < devices.size(); device_id++)
    {
        for (auto &sequence : io_sequences[device_id])
        {
            for (int i = 0; i < sequence->size(); i++)
            {
                auto interval = sequence->Interval(i);
                collector->Add(interval);
            }
        }
    }

    if (!solver.Solve(main_phase, search_log, objective_monitor, limit, collector))
    {
        std::cerr << "Could not solve" << std::endl;
        FAIL();
    }

    std::cout << "Optimal Schedule Length: " << collector->objective_value(0) << "\n";
    std::stringstream processor_tasks;
    for (int proc_id = 0; proc_id < processors.size(); proc_id++)
    {
        for (int device_id = 0; device_id < devices.size(); device_id++)
        {
            processor_tasks << "Processor " << proc_id << " by " << device_id << " : \n";

            std::stringstream times;
            for (int block_id = 0; block_id < blocks.size(); block_id++)
            {
                auto &task = all_tasks[proc_id][device_id][block_id];
                if (collector->PerformedValue(0, task.p_interval) != 1)
                {
                    continue;
                }

                processor_tasks << "block " << task.block_len << " B | ";

                times << "p: [" << std::setw(10)
                      << collector->Value(0, task.p_interval->StartExpr()->Var()) << ", "
                      << std::setw(10)
                      << collector->Value(0, task.p_interval->EndExpr()->Var()) << "] ";

                times << "io: [" << std::setw(10)
                      << collector->Value(0, task.io_interval->StartExpr()->Var()) << ", "
                      << std::setw(10)
                      << collector->Value(0, task.io_interval->EndExpr()->Var()) << "] | ";
            }
            processor_tasks << "\n" << times.str() << "\n";
        }
    }

    std::cout << processor_tasks.str() << std::endl;
}

TEST_F(OrtoolsFixture, CpModelTest)
{
    const int64 FILE_SIZE = 12000;
    const int SEC_LEVEL = 4;

    using namespace operations_research;

    std::vector<int64> blocks = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216 };
    std::vector<int> devices = { 1, 40};

    std::vector<std::string> cipher_names = {"botan-CAMELLIA-128-XTS", "botan-CAMELLIA-192-XTS", "botan-CAMELLIA-256-XTS", "cryptopp-AES-128-CBC", "cryptopp-AES-128-CBC", "cryptopp-AES-128-CFB", "cryptopp-AES-128-CFB", "cryptopp-AES-128-CTR", "cryptopp-AES-128-CTR", "cryptopp-AES-128-ECB", "cryptopp-AES-128-OFB", "cryptopp-AES-192-CBC", "cryptopp-AES-192-CBC", "cryptopp-AES-192-CBC", "cryptopp-AES-192-CFB", "cryptopp-AES-192-CFB", "cryptopp-AES-192-CFB", "cryptopp-AES-192-CTR", "cryptopp-AES-192-CTR", "cryptopp-AES-192-CTR", "cryptopp-AES-192-ECB", "cryptopp-AES-192-OFB", "cryptopp-AES-256-CBC", "cryptopp-AES-256-CBC", "cryptopp-AES-256-CFB", "cryptopp-AES-256-CTR", "cryptopp-AES-256-CTR", "cryptopp-AES-256-CTR", "cryptopp-AES-256-ECB", "cryptopp-AES-256-ECB", "cryptopp-AES-256-OFB", "cryptopp-ARIA-128-CBC", "cryptopp-ARIA-128-CBC", "cryptopp-ARIA-128-CBC", "cryptopp-ARIA-128-CFB", "cryptopp-ARIA-128-CFB", "cryptopp-ARIA-128-CFB", "cryptopp-ARIA-128-CTR", "cryptopp-ARIA-128-CTR", "cryptopp-ARIA-128-CTR", "cryptopp-ARIA-128-ECB", "cryptopp-ARIA-128-OFB", "cryptopp-ARIA-128-OFB", "cryptopp-ARIA-128-OFB", "cryptopp-ARIA-192-CFB", "cryptopp-ARIA-192-CFB", "cryptopp-ARIA-192-CFB", "cryptopp-ARIA-192-CTR", "cryptopp-ARIA-192-CTR", "cryptopp-ARIA-192-CTR", "cryptopp-ARIA-192-OFB", "cryptopp-ARIA-192-OFB", "cryptopp-ARIA-192-OFB", "cryptopp-ARIA-256-CFB", "cryptopp-ARIA-256-CFB", "cryptopp-ARIA-256-CFB", "cryptopp-ARIA-256-CFB", "cryptopp-ARIA-256-CTR", "cryptopp-ARIA-256-CTR", "cryptopp-ARIA-256-CTR", "cryptopp-ARIA-256-CTR", "cryptopp-ARIA-256-ECB", "cryptopp-ARIA-256-OFB", "cryptopp-ARIA-256-OFB", "cryptopp-ARIA-256-OFB", "cryptopp-ARIA-256-OFB", "cryptopp-CAMELLIA-128-CBC", "cryptopp-CAMELLIA-128-CBC", "cryptopp-CAMELLIA-128-CBC", "cryptopp-CAMELLIA-128-CTR", "cryptopp-CAMELLIA-192-CBC", "cryptopp-CAMELLIA-192-CBC", "cryptopp-CAMELLIA-192-CBC", "cryptopp-CAMELLIA-192-CFB", "cryptopp-CAMELLIA-192-OFB", "cryptopp-CAMELLIA-256-CBC", "cryptopp-CAMELLIA-256-CBC", "cryptopp-CAMELLIA-256-CBC", "cryptopp-CAMELLIA-256-CBC", "cryptopp-CAMELLIA-256-CFB", "gcrypt-AES-128-CFB", "gcrypt-AES-128-CFB", "gcrypt-AES-128-CTR", "gcrypt-AES-128-CTR", "gcrypt-AES-192-CFB", "gcrypt-AES-192-CFB", "gcrypt-AES-192-CFB", "gcrypt-AES-192-CTR", "gcrypt-AES-192-CTR", "gcrypt-AES-192-CTR", "gcrypt-AES-256-CFB", "gcrypt-AES-256-CTR", "gcrypt-AES-256-CTR", "gcrypt-AES-256-CTR", "gcrypt-CAMELLIA-128-CTR", "gcrypt-CAMELLIA-192-CFB", "gcrypt-CAMELLIA-192-CTR", "gcrypt-CAMELLIA-192-CTR", "gcrypt-CAMELLIA-256-CFB", "gcrypt-CAMELLIA-256-CTR", "gcrypt-CAMELLIA-256-CTR", "openssl-AES-128-CBC", "openssl-AES-128-CBC", "openssl-AES-128-CFB", "openssl-AES-128-CFB", "openssl-AES-128-CTR", "openssl-AES-128-CTR", "openssl-AES-128-ECB", "openssl-AES-128-OFB", "openssl-AES-128-OFB", "openssl-AES-128-XTS", "openssl-AES-128-XTS", "openssl-AES-128-XTS", "openssl-AES-128-XTS", "openssl-AES-192-CBC", "openssl-AES-192-CBC", "openssl-AES-192-CBC", "openssl-AES-192-CFB", "openssl-AES-192-CFB", "openssl-AES-192-CFB", "openssl-AES-192-CTR", "openssl-AES-192-CTR", "openssl-AES-192-CTR", "openssl-AES-192-ECB", "openssl-AES-192-OFB", "openssl-AES-192-OFB", "openssl-AES-192-OFB", "openssl-AES-256-CBC", "openssl-AES-256-CBC", "openssl-AES-256-CBC", "openssl-AES-256-CFB", "openssl-AES-256-CFB", "openssl-AES-256-CFB", "openssl-AES-256-CTR", "openssl-AES-256-CTR", "openssl-AES-256-CTR", "openssl-AES-256-ECB", "openssl-AES-256-ECB", "openssl-AES-256-OFB", "openssl-AES-256-OFB", "openssl-AES-256-OFB", "openssl-AES-256-XTS", "openssl-AES-256-XTS", "openssl-AES-256-XTS", "openssl-AES-256-XTS", "openssl-ARIA-128-CBC", "openssl-ARIA-128-CBC", "openssl-ARIA-128-CBC", "openssl-ARIA-128-CFB", "openssl-ARIA-128-CFB", "openssl-ARIA-128-CFB", "openssl-ARIA-128-CTR", "openssl-ARIA-192-CBC", "openssl-ARIA-192-CBC", "openssl-ARIA-192-CFB", "openssl-ARIA-192-CFB", "openssl-ARIA-192-CFB", "openssl-ARIA-192-CTR", "openssl-ARIA-192-CTR", "openssl-ARIA-192-CTR", "openssl-ARIA-192-ECB", "openssl-ARIA-192-ECB", "openssl-ARIA-192-OFB", "openssl-ARIA-192-OFB", "openssl-ARIA-256-CBC", "openssl-ARIA-256-CBC", "openssl-ARIA-256-CBC", "openssl-ARIA-256-CBC", "openssl-ARIA-256-CFB", "openssl-ARIA-256-CFB", "openssl-ARIA-256-CFB", "openssl-ARIA-256-CFB", "openssl-ARIA-256-CTR", "openssl-ARIA-256-CTR", "openssl-ARIA-256-CTR", "openssl-ARIA-256-ECB", "openssl-ARIA-256-ECB", "openssl-ARIA-256-OFB", "openssl-ARIA-256-OFB", "openssl-ARIA-256-OFB", "openssl-ARIA-256-OFB", "openssl-SEED-128-CBC", "openssl-SEED-128-CBC", "openssl-SEED-128-CBC", "openssl-SEED-128-CFB", "openssl-SEED-128-CFB", "openssl-SEED-128-CFB", "wolfcrypt-AES-128-CTR", "wolfcrypt-AES-128-CTR", "wolfcrypt-AES-192-CTR", "wolfcrypt-AES-192-CTR", "wolfcrypt-AES-192-CTR", "wolfcrypt-AES-256-CTR", "wolfcrypt-AES-256-CTR", "wolfcrypt-AES-256-CTR" };

    std::vector<int> sec_levels = {5, 5, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3, 2, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 2, 1, 2, 3, 4, 1, 2, 3, 3, 1, 2, 3, 4, 4, 1, 2, 3, 4, 4, 1, 2, 1, 2, 1, 2, 3, 1, 2, 3, 3, 1, 2, 3, 3, 4, 3, 4, 4, 3, 4, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 3, 1, 2, 1, 2, 3, 1, 2, 3, 1, 2, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 1, 2, 1, 2, 3, 4, 1, 2, 3, 1, 2, 3, 1, 2, 1, 2, 3, 1, 2, 3 };

    using Processor = std::vector<int64>;
    std::vector<Processor> processors = {
            {0, 0, 0, 0, 470967416666, 0, 115799963541, 0, 30071257812, 0, 7339902994, 0, 0, 942073323, 0, 296405090, 179713816, 116766619, 0, 74009569, 66307013, 0, 0, 60683224, 59731560 },
            {0, 0, 0, 0, 0, 235758375000, 0, 57835210937, 0, 15156259114, 0, 3862365071, 1829022867, 0, 512270141, 0, 0, 0, 0, 0, 0, 0, 65436749, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96325098, 0, 0, 67461610, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33873349, 18454058, 10456768, 6769572, 4859975, 3779835, 3208666, 2956596 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33873349, 18454058, 10456768, 6769572, 4859975, 3779835, 3208666, 2956596 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33991129, 17064530, 10486232, 6479958, 4696964, 3892226, 3460078, 3150268 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33991129, 17064530, 10486232, 6479958, 4696964, 3892226, 3460078, 3150268 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30437123, 15904747, 8903467, 5238079, 3204850, 2296586, 1885948, 1609633 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30437123, 15904747, 8903467, 5238079, 3204850, 2296586, 1885948, 1609633 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32053029, 16644607, 8766162, 5204563, 3364824, 2667174, 1786552, 1679524 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34460642, 0, 0, 8028706, 5973840, 5055578, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22061453, 12811244, 7833007, 5671184, 4238752, 3715607, 3527481 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22061453, 12811244, 7833007, 5671184, 4238752, 3715607, 3527481 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22061453, 12811244, 7833007, 5671184, 4238752, 3715607, 3527481 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38022466, 20222979, 12152638, 7982666, 5709275, 5888680, 4209359, 4618006 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38022466, 20222979, 12152638, 7982666, 5709275, 5888680, 4209359, 4618006 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38022466, 20222979, 12152638, 7982666, 5709275, 5888680, 4209359, 4618006 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37140586, 19420494, 10555635, 5906565, 3776608, 2686742, 2093332, 1756688 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37140586, 19420494, 10555635, 5906565, 3776608, 2686742, 2093332, 1756688 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37140586, 19420494, 10555635, 5906565, 3776608, 2686742, 2093332, 1756688 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6245292, 3815206, 2649503, 2189431, 1977176 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14087914, 0, 7269877, 0, 5296317, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20947615, 12879388, 8105266, 6011118, 4755755, 4087923, 3730304 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20947615, 12879388, 8105266, 6011118, 4755755, 4087923, 3730304 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21640946, 12754719, 8467947, 6370102, 5852035, 4949417, 4450674 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37926681, 19785268, 10736923, 6433140, 3951607, 2806043, 2251466, 1953337 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37926681, 19785268, 10736923, 6433140, 3951607, 2806043, 2251466, 1953337 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37926681, 19785268, 10736923, 6433140, 3951607, 2806043, 2251466, 1953337 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11270020, 5944371, 3917502, 2791864, 2556328, 1844867 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11270020, 5944371, 3917502, 2791864, 2556328, 1844867 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22843227, 0, 0, 0, 0, 0, 0 },
            {0, 1241258500000, 623595166666, 310258083333, 0, 0, 0, 0, 0, 0, 2461068033, 1232671712, 0, 334253255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1241258500000, 623595166666, 310258083333, 0, 0, 0, 0, 0, 0, 2461068033, 1232671712, 0, 334253255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1241258500000, 623595166666, 310258083333, 0, 0, 0, 0, 0, 0, 2461068033, 1232671712, 0, 334253255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2340359333333, 1212389000000, 592742833333, 293983583333, 148829625000, 73355677083, 37044380208, 18582161458, 9285014322, 4694729817, 2338342773, 1209335449, 586254069, 320237874, 171626302, 97930674, 0, 37449264, 0, 0, 0, 0, 0, 0, 0 },
            {2340359333333, 1212389000000, 592742833333, 293983583333, 148829625000, 73355677083, 37044380208, 18582161458, 9285014322, 4694729817, 2338342773, 1209335449, 586254069, 320237874, 171626302, 97930674, 0, 37449264, 0, 0, 0, 0, 0, 0, 0 },
            {2340359333333, 1212389000000, 592742833333, 293983583333, 148829625000, 73355677083, 37044380208, 18582161458, 9285014322, 4694729817, 2338342773, 1209335449, 586254069, 320237874, 171626302, 97930674, 0, 37449264, 0, 0, 0, 0, 0, 0, 0 },
            {2373356333333, 1161341666666, 590094083333, 286479958333, 143295770833, 72305437500, 35805661458, 17850322916, 9147204427, 0, 2312021484, 1203257486, 612327311, 326747070, 176768147, 98889892, 53820348, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2373356333333, 1161341666666, 590094083333, 286479958333, 143295770833, 72305437500, 35805661458, 17850322916, 9147204427, 0, 2312021484, 1203257486, 612327311, 326747070, 176768147, 98889892, 53820348, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2373356333333, 1161341666666, 590094083333, 286479958333, 143295770833, 72305437500, 35805661458, 17850322916, 9147204427, 0, 2312021484, 1203257486, 612327311, 326747070, 176768147, 98889892, 53820348, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2485250000000, 1145584666666, 603596583333, 297832458333, 153947312500, 78301625000, 36909083333, 18783945312, 9206423177, 0, 0, 1189689290, 0, 326090901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2404719333333, 1178010833333, 586080916666, 280296666666, 146189416666, 0, 35395390625, 18094291666, 9103044270, 4487514973, 2226976888, 1176283854, 587487792, 324307006, 178974772, 94764455, 55652893, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2404719333333, 1178010833333, 586080916666, 280296666666, 146189416666, 0, 35395390625, 18094291666, 9103044270, 4487514973, 2226976888, 1176283854, 587487792, 324307006, 178974772, 94764455, 55652893, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2404719333333, 1178010833333, 586080916666, 280296666666, 146189416666, 0, 35395390625, 18094291666, 9103044270, 4487514973, 2226976888, 1176283854, 587487792, 324307006, 178974772, 94764455, 55652893, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1140547166666, 580150916666, 295673125000, 144182000000, 72274958333, 36339171875, 18240518229, 8911873697, 4562270182, 2283576171, 1150701822, 590669270, 327077392, 171670979, 97362294, 59216842, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1140547166666, 580150916666, 295673125000, 144182000000, 72274958333, 36339171875, 18240518229, 8911873697, 4562270182, 2283576171, 1150701822, 590669270, 327077392, 171670979, 97362294, 59216842, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1140547166666, 580150916666, 295673125000, 144182000000, 72274958333, 36339171875, 18240518229, 8911873697, 4562270182, 2283576171, 1150701822, 590669270, 327077392, 171670979, 97362294, 59216842, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2293082666666, 1169851666666, 590653250000, 292039166666, 142210187500, 72068427083, 35461088541, 18450364583, 9127115885, 4532985026, 2189237955, 1153301757, 599193522, 317487752, 179449218, 95600545, 57522893, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2293082666666, 1169851666666, 590653250000, 292039166666, 142210187500, 72068427083, 35461088541, 18450364583, 9127115885, 4532985026, 2189237955, 1153301757, 599193522, 317487752, 179449218, 95600545, 57522893, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2293082666666, 1169851666666, 590653250000, 292039166666, 142210187500, 72068427083, 35461088541, 18450364583, 9127115885, 4532985026, 2189237955, 1153301757, 599193522, 317487752, 179449218, 95600545, 57522893, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2345911333333, 1122892000000, 569246750000, 292887708333, 138255750000, 70581895833, 34881968750, 17583572916, 9022105468, 4352496744, 2303465169, 1135562011, 584506998, 327267211, 171084940, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2345911333333, 1122892000000, 569246750000, 292887708333, 138255750000, 70581895833, 34881968750, 17583572916, 9022105468, 4352496744, 2303465169, 1135562011, 584506998, 327267211, 171084940, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2345911333333, 1122892000000, 569246750000, 292887708333, 138255750000, 70581895833, 34881968750, 17583572916, 9022105468, 4352496744, 2303465169, 1135562011, 584506998, 327267211, 171084940, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2248630333333, 1176323500000, 592356750000, 288783083333, 144671187500, 74957656250, 37265359375, 17891231770, 8844135416, 4695324218, 2249983072, 1174327636, 604588460, 323760294, 172667277, 95425018, 0, 42397982, 32188275, 0, 0, 0, 0, 0, 0 },
            {2248630333333, 1176323500000, 592356750000, 288783083333, 144671187500, 74957656250, 37265359375, 17891231770, 8844135416, 4695324218, 2249983072, 1174327636, 604588460, 323760294, 172667277, 95425018, 0, 42397982, 32188275, 0, 0, 0, 0, 0, 0 },
            {2248630333333, 1176323500000, 592356750000, 288783083333, 144671187500, 74957656250, 37265359375, 17891231770, 8844135416, 4695324218, 2249983072, 1174327636, 604588460, 323760294, 172667277, 95425018, 0, 42397982, 32188275, 0, 0, 0, 0, 0, 0 },
            {2248630333333, 1176323500000, 592356750000, 288783083333, 144671187500, 74957656250, 37265359375, 17891231770, 8844135416, 4695324218, 2249983072, 1174327636, 604588460, 323760294, 172667277, 95425018, 0, 42397982, 32188275, 0, 0, 0, 0, 0, 0 },
            {2232288666666, 1177561666666, 583403833333, 282065291666, 141955708333, 70781416666, 35506041666, 18239247395, 9082106770, 4556270182, 2317113932, 1164632812, 599900227, 320934285, 169587585, 99340861, 61722223, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2232288666666, 1177561666666, 583403833333, 282065291666, 141955708333, 70781416666, 35506041666, 18239247395, 9082106770, 4556270182, 2317113932, 1164632812, 599900227, 320934285, 169587585, 99340861, 61722223, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2232288666666, 1177561666666, 583403833333, 282065291666, 141955708333, 70781416666, 35506041666, 18239247395, 9082106770, 4556270182, 2317113932, 1164632812, 599900227, 320934285, 169587585, 99340861, 61722223, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2232288666666, 1177561666666, 583403833333, 282065291666, 141955708333, 70781416666, 35506041666, 18239247395, 9082106770, 4556270182, 2317113932, 1164632812, 599900227, 320934285, 169587585, 99340861, 61722223, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 9795360677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2196793666666, 1147640833333, 571443666666, 288329916666, 142304291666, 74262427083, 36248713541, 18361046875, 9056214843, 4612059895, 2205699544, 1098939290, 598551269, 333951904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2196793666666, 1147640833333, 571443666666, 288329916666, 142304291666, 74262427083, 36248713541, 18361046875, 9056214843, 4612059895, 2205699544, 1098939290, 598551269, 333951904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2196793666666, 1147640833333, 571443666666, 288329916666, 142304291666, 74262427083, 36248713541, 18361046875, 9056214843, 4612059895, 2205699544, 1098939290, 598551269, 333951904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2196793666666, 1147640833333, 571443666666, 288329916666, 142304291666, 74262427083, 36248713541, 18361046875, 9056214843, 4612059895, 2205699544, 1098939290, 598551269, 333951904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2472843666666, 0, 0, 0, 152182416666, 0, 38458625000, 0, 0, 0, 0, 1217909342, 645124186, 332139444, 0, 99213887, 59341735, 35772392, 0, 0, 0, 0, 0, 0, 0 },
            {2472843666666, 0, 0, 0, 152182416666, 0, 38458625000, 0, 0, 0, 0, 1217909342, 645124186, 332139444, 0, 99213887, 59341735, 35772392, 0, 0, 0, 0, 0, 0, 0 },
            {2472843666666, 0, 0, 0, 152182416666, 0, 38458625000, 0, 0, 0, 0, 1217909342, 645124186, 332139444, 0, 99213887, 59341735, 35772392, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37142117, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 4849887369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 4849887369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 4849887369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43545600, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31384869, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 155492187500, 77297395833, 0, 0, 0, 0, 2420232747, 0, 0, 0, 180576822, 0, 63024805, 0, 31921424, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 155492187500, 77297395833, 0, 0, 0, 0, 2420232747, 0, 0, 0, 180576822, 0, 63024805, 0, 31921424, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 155492187500, 77297395833, 0, 0, 0, 0, 2420232747, 0, 0, 0, 180576822, 0, 63024805, 0, 31921424, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 155492187500, 77297395833, 0, 0, 0, 0, 2420232747, 0, 0, 0, 180576822, 0, 63024805, 0, 31921424, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25674070, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5015560, 3730397, 3162744 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5015560, 3730397, 3162744 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5902337, 3620432, 2588354, 1907627 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5902337, 3620432, 2588354, 1907627 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5226690, 4568370, 3485006 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5226690, 4568370, 3485006 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5226690, 4568370, 3485006 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6386102, 3838057, 2712888, 2063934 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6386102, 3838057, 2712888, 2063934 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6386102, 3838057, 2712888, 2063934 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5350601, 4572843, 3864605 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10413178, 5687500, 3739352, 2729260, 2139195 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10413178, 5687500, 3739352, 2729260, 2139195 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10413178, 5687500, 3739352, 2729260, 2139195 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4724193, 4046003 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21604854, 0, 0, 0, 12338333 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25517006, 13995808, 9088255, 6742645, 5446717, 4829871 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25517006, 13995808, 9088255, 6742645, 5446717, 4829871 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16542670, 14198517, 12953796, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25419212, 14294028, 9082061, 6617652, 5583518, 4969530 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25419212, 14294028, 9082061, 6617652, 5583518, 4969530 },
            {2492034000000, 0, 0, 0, 0, 0, 0, 0, 0, 4730158854, 0, 0, 613864501, 307838175, 163721964, 77046203, 41390655, 21202115, 12796712, 7373816, 5332104, 3929724, 3284628, 2996292, 2698915 },
            {2492034000000, 0, 0, 0, 0, 0, 0, 0, 0, 4730158854, 0, 0, 613864501, 307838175, 163721964, 77046203, 41390655, 21202115, 12796712, 7373816, 5332104, 3929724, 3284628, 2996292, 2698915 },
            {2499171666666, 0, 0, 0, 0, 0, 0, 19323861979, 0, 4801513020, 0, 0, 611127848, 292758707, 159400329, 88080098, 47660471, 25840555, 14959545, 10742918, 0, 0, 0, 0, 0 },
            {2499171666666, 0, 0, 0, 0, 0, 0, 19323861979, 0, 4801513020, 0, 0, 611127848, 292758707, 159400329, 88080098, 47660471, 25840555, 14959545, 10742918, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90488413, 46025487, 24687540, 12644320, 7240757, 4257390, 2706034, 2064775, 1739185, 1442652 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90488413, 46025487, 24687540, 12644320, 7240757, 4257390, 2706034, 2064775, 1739185, 1442652 },
            {0, 0, 0, 0, 0, 0, 38001614583, 0, 0, 0, 0, 0, 624293619, 304952229, 158587422, 76956542, 40016983, 20934282, 11384188, 6481763, 3877563, 2663364, 1990916, 1630581, 1450764 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50554168, 28585632, 16457644, 10284461, 7058483, 5817893, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50554168, 28585632, 16457644, 10284461, 7058483, 5817893, 0, 0, 0 },
            {0, 0, 0, 0, 130858854166, 65089708333, 31929463541, 16026562500, 8013419270, 4067502604, 2038791666, 1038617187, 504592285, 251415852, 130989034, 67008992, 34496266, 17930117, 10010742, 5626752, 3575506, 2427768, 1914846, 1620184, 1503233 },
            {0, 0, 0, 0, 130858854166, 65089708333, 31929463541, 16026562500, 8013419270, 4067502604, 2038791666, 1038617187, 504592285, 251415852, 130989034, 67008992, 34496266, 17930117, 10010742, 5626752, 3575506, 2427768, 1914846, 1620184, 1503233 },
            {0, 0, 0, 0, 130858854166, 65089708333, 31929463541, 16026562500, 8013419270, 4067502604, 2038791666, 1038617187, 504592285, 251415852, 130989034, 67008992, 34496266, 17930117, 10010742, 5626752, 3575506, 2427768, 1914846, 1620184, 1503233 },
            {0, 0, 0, 0, 130858854166, 65089708333, 31929463541, 16026562500, 8013419270, 4067502604, 2038791666, 1038617187, 504592285, 251415852, 130989034, 67008992, 34496266, 17930117, 10010742, 5626752, 3575506, 2427768, 1914846, 1620184, 1503233 },
            {2431504000000, 1205970666666, 615004333333, 304960625000, 0, 76790447916, 37560223958, 18817781250, 9416535156, 4787705729, 2433742838, 1192077311, 606080159, 298487996, 155444274, 80735758, 44613927, 23220720, 13991537, 8011416, 5401224, 4306954, 3450348, 3240650, 3007328 },
            {2431504000000, 1205970666666, 615004333333, 304960625000, 0, 76790447916, 37560223958, 18817781250, 9416535156, 4787705729, 2433742838, 1192077311, 606080159, 298487996, 155444274, 80735758, 44613927, 23220720, 13991537, 8011416, 5401224, 4306954, 3450348, 3240650, 3007328 },
            {2431504000000, 1205970666666, 615004333333, 304960625000, 0, 76790447916, 37560223958, 18817781250, 9416535156, 4787705729, 2433742838, 1192077311, 606080159, 298487996, 155444274, 80735758, 44613927, 23220720, 13991537, 8011416, 5401224, 4306954, 3450348, 3240650, 3007328 },
            {2351602333333, 1227585500000, 623847416666, 310263083333, 148689104166, 75073125000, 37491109375, 18715895833, 9620065104, 4820486328, 2422128906, 1180641276, 587285563, 309343709, 160323791, 83136220, 46030807, 26444465, 15314806, 11353121, 9296806, 0, 6356755, 0, 0 },
            {2351602333333, 1227585500000, 623847416666, 310263083333, 148689104166, 75073125000, 37491109375, 18715895833, 9620065104, 4820486328, 2422128906, 1180641276, 587285563, 309343709, 160323791, 83136220, 46030807, 26444465, 15314806, 11353121, 9296806, 0, 6356755, 0, 0 },
            {2351602333333, 1227585500000, 623847416666, 310263083333, 148689104166, 75073125000, 37491109375, 18715895833, 9620065104, 4820486328, 2422128906, 1180641276, 587285563, 309343709, 160323791, 83136220, 46030807, 26444465, 15314806, 11353121, 9296806, 0, 6356755, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179048116, 94239196, 43546656, 24812454, 13656906, 6782343, 4381453, 2812084, 2001677, 1711982, 1526331 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179048116, 94239196, 43546656, 24812454, 13656906, 6782343, 4381453, 2812084, 2001677, 1711982, 1526331 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179048116, 94239196, 43546656, 24812454, 13656906, 6782343, 4381453, 2812084, 2001677, 1711982, 1526331 },
            {2399210666666, 1234042833333, 621706250000, 0, 151379458333, 0, 38299395833, 19321263020, 9654000000, 4784111979, 2348733398, 1160323242, 574796549, 296081380, 156091105, 77293599, 39951314, 21419448, 11260403, 6400182, 3825222, 2700159, 2072872, 1689743, 1545353 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97777628, 57201777, 26560310, 17667816, 10279651, 8036716, 6324279, 5431002, 5382597, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97777628, 57201777, 26560310, 17667816, 10279651, 8036716, 6324279, 5431002, 5382597, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97777628, 57201777, 26560310, 17667816, 10279651, 8036716, 6324279, 5431002, 5382597, 0 },
            {2447593000000, 1222616333333, 595844583333, 295963500000, 151398562500, 76229500000, 38020822916, 19189169270, 9427402343, 4667077473, 2379964843, 1206884928, 596401123, 304572916, 154508422, 79633219, 43597747, 23734959, 13544932, 8434185, 5953116, 4420583, 4148392, 3466962, 3562047 },
            {2447593000000, 1222616333333, 595844583333, 295963500000, 151398562500, 76229500000, 38020822916, 19189169270, 9427402343, 4667077473, 2379964843, 1206884928, 596401123, 304572916, 154508422, 79633219, 43597747, 23734959, 13544932, 8434185, 5953116, 4420583, 4148392, 3466962, 3562047 },
            {2447593000000, 1222616333333, 595844583333, 295963500000, 151398562500, 76229500000, 38020822916, 19189169270, 9427402343, 4667077473, 2379964843, 1206884928, 596401123, 304572916, 154508422, 79633219, 43597747, 23734959, 13544932, 8434185, 5953116, 4420583, 4148392, 3466962, 3562047 },
            {2502513333333, 1239591333333, 598061250000, 299168416666, 148559604166, 73580229166, 38298916666, 19148375000, 9646207031, 4841250000, 2417814453, 1147762369, 594397542, 320756998, 166747802, 82947855, 51100199, 26531687, 16692353, 11820686, 8786728, 0, 0, 0, 0 },
            {2502513333333, 1239591333333, 598061250000, 299168416666, 148559604166, 73580229166, 38298916666, 19148375000, 9646207031, 4841250000, 2417814453, 1147762369, 594397542, 320756998, 166747802, 82947855, 51100199, 26531687, 16692353, 11820686, 8786728, 0, 0, 0, 0 },
            {2502513333333, 1239591333333, 598061250000, 299168416666, 148559604166, 73580229166, 38298916666, 19148375000, 9646207031, 4841250000, 2417814453, 1147762369, 594397542, 320756998, 166747802, 82947855, 51100199, 26531687, 16692353, 11820686, 8786728, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178331949, 87985168, 46398468, 24489402, 13110759, 7757681, 4437295, 2941644, 2247976, 1858987, 1815380 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178331949, 87985168, 46398468, 24489402, 13110759, 7757681, 4437295, 2941644, 2247976, 1858987, 1815380 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178331949, 87985168, 46398468, 24489402, 13110759, 7757681, 4437295, 2941644, 2247976, 1858987, 1815380 },
            {2423898666666, 1239144500000, 602577083333, 305697833333, 0, 0, 0, 0, 0, 0, 2456772786, 0, 608670247, 313395751, 0, 78092458, 40618835, 21199452, 11524486, 6317211, 4088867, 2826230, 2009076, 1757101, 1596154 },
            {2423898666666, 1239144500000, 602577083333, 305697833333, 0, 0, 0, 0, 0, 0, 2456772786, 0, 608670247, 313395751, 0, 78092458, 40618835, 21199452, 11524486, 6317211, 4088867, 2826230, 2009076, 1757101, 1596154 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97637145, 54948028, 29565989, 18254603, 11195341, 9090189, 7117503, 6265663, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97637145, 54948028, 29565989, 18254603, 11195341, 9090189, 7117503, 6265663, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97637145, 54948028, 29565989, 18254603, 11195341, 9090189, 7117503, 6265663, 0, 0 },
            {0, 0, 0, 0, 132475791666, 67091989583, 32891526041, 16583588541, 8288533854, 4248789062, 2029726236, 1039690429, 508409830, 256317504, 130754089, 67513458, 34805547, 19159027, 10544682, 6104819, 3875182, 2611872, 2319075, 1768892, 1655172 },
            {0, 0, 0, 0, 132475791666, 67091989583, 32891526041, 16583588541, 8288533854, 4248789062, 2029726236, 1039690429, 508409830, 256317504, 130754089, 67513458, 34805547, 19159027, 10544682, 6104819, 3875182, 2611872, 2319075, 1768892, 1655172 },
            {0, 0, 0, 0, 132475791666, 67091989583, 32891526041, 16583588541, 8288533854, 4248789062, 2029726236, 1039690429, 508409830, 256317504, 130754089, 67513458, 34805547, 19159027, 10544682, 6104819, 3875182, 2611872, 2319075, 1768892, 1655172 },
            {0, 0, 0, 0, 132475791666, 67091989583, 32891526041, 16583588541, 8288533854, 4248789062, 2029726236, 1039690429, 508409830, 256317504, 130754089, 67513458, 34805547, 19159027, 10544682, 6104819, 3875182, 2611872, 2319075, 1768892, 1655172 },
            {0, 0, 0, 0, 0, 0, 0, 0, 9786554687, 0, 0, 0, 0, 0, 0, 0, 60166320, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 9786554687, 0, 0, 0, 0, 0, 0, 0, 60166320, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 9786554687, 0, 0, 0, 0, 0, 0, 0, 60166320, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2422190000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 175237060, 0, 58937357, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2422190000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 175237060, 0, 58937357, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2422190000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 175237060, 0, 58937357, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38418334, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 19463932291, 9786790364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 0, 19463932291, 9786790364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 618127750000, 0, 0, 0, 38486812500, 0, 0, 4804779947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 618127750000, 0, 0, 0, 38486812500, 0, 0, 4804779947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 618127750000, 0, 0, 0, 38486812500, 0, 0, 4804779947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 155913541666, 77586197916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 155913541666, 77586197916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 155913541666, 77586197916, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 624211750000, 305286458333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 624211750000, 305286458333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 625871666666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 625871666666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2440834333333, 1237485166666, 0, 308382750000, 151710416666, 78567333333, 0, 0, 0, 0, 0, 1217841308, 0, 0, 0, 0, 61032236, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2440834333333, 1237485166666, 0, 308382750000, 151710416666, 78567333333, 0, 0, 0, 0, 0, 1217841308, 0, 0, 0, 0, 61032236, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2440834333333, 1237485166666, 0, 308382750000, 151710416666, 78567333333, 0, 0, 0, 0, 0, 1217841308, 0, 0, 0, 0, 61032236, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2440834333333, 1237485166666, 0, 308382750000, 151710416666, 78567333333, 0, 0, 0, 0, 0, 1217841308, 0, 0, 0, 0, 61032236, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2475329666666, 0, 635652500000, 0, 0, 0, 0, 0, 9746416666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2475329666666, 0, 635652500000, 0, 0, 0, 0, 0, 9746416666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2475329666666, 0, 635652500000, 0, 0, 0, 0, 0, 9746416666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {2475329666666, 0, 635652500000, 0, 0, 0, 0, 0, 9746416666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 310408125000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 310408125000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 310408125000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1242246166666, 0, 0, 155784375000, 76946145833, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1242246166666, 0, 0, 155784375000, 76946145833, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1241807666666, 0, 0, 0, 78272552083, 0, 18978812500, 0, 0, 2390324544, 0, 0, 0, 0, 100893981, 0, 42787404, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1241807666666, 0, 0, 0, 78272552083, 0, 18978812500, 0, 0, 2390324544, 0, 0, 0, 0, 100893981, 0, 42787404, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1241807666666, 0, 0, 0, 78272552083, 0, 18978812500, 0, 0, 2390324544, 0, 0, 0, 0, 100893981, 0, 42787404, 0, 0, 0, 0, 0, 0, 0 },
            {0, 1241807666666, 0, 0, 0, 78272552083, 0, 18978812500, 0, 0, 2390324544, 0, 0, 0, 0, 100893981, 0, 42787404, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 38879906250, 0, 0, 4822289713, 0, 0, 630934895, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 38879906250, 0, 0, 4822289713, 0, 0, 630934895, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 38879906250, 0, 0, 4822289713, 0, 0, 630934895, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 38581239583, 19294434895, 0, 0, 0, 1229889160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 38581239583, 19294434895, 0, 0, 0, 1229889160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {0, 0, 0, 0, 0, 0, 38581239583, 19294434895, 0, 0, 0, 1229889160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            {1183328666666, 587216166666, 296696916666, 147389166666, 71885000000, 37973458333, 18271401041, 9126526041, 4637617187, 2230108072, 1144950195, 580498860, 279479329, 154677327, 81803588, 42502827, 27481135, 17725797, 11955268, 8940471, 6812103, 0, 0, 0, 0 },
            {1183328666666, 587216166666, 296696916666, 147389166666, 71885000000, 37973458333, 18271401041, 9126526041, 4637617187, 2230108072, 1144950195, 580498860, 279479329, 154677327, 81803588, 42502827, 27481135, 17725797, 11955268, 8940471, 6812103, 0, 0, 0, 0 },
            {1156343666666, 579683166666, 291940416666, 146651500000, 74744854166, 36100156250, 17934536458, 9369111979, 4634687500, 2260590494, 1167553059, 588411458, 298894449, 158239624, 87245300, 48507446, 27298934, 16510205, 10610158, 10263275, 7744788, 6792145, 0, 0, 0 },
            {1156343666666, 579683166666, 291940416666, 146651500000, 74744854166, 36100156250, 17934536458, 9369111979, 4634687500, 2260590494, 1167553059, 588411458, 298894449, 158239624, 87245300, 48507446, 27298934, 16510205, 10610158, 10263275, 7744788, 6792145, 0, 0, 0 },
            {1156343666666, 579683166666, 291940416666, 146651500000, 74744854166, 36100156250, 17934536458, 9369111979, 4634687500, 2260590494, 1167553059, 588411458, 298894449, 158239624, 87245300, 48507446, 27298934, 16510205, 10610158, 10263275, 7744788, 6792145, 0, 0, 0 },
            {1136255666666, 568616833333, 288405083333, 139081166666, 71026000000, 36318843750, 18541651041, 9076617187, 4409654947, 2331464843, 1187051106, 590145833, 297151855, 153936482, 83885152, 45887410, 30268315, 18033208, 12434319, 9713795, 8318701, 7593023, 0, 0, 0 },
            {1136255666666, 568616833333, 288405083333, 139081166666, 71026000000, 36318843750, 18541651041, 9076617187, 4409654947, 2331464843, 1187051106, 590145833, 297151855, 153936482, 83885152, 45887410, 30268315, 18033208, 12434319, 9713795, 8318701, 7593023, 0, 0, 0 },
            {1136255666666, 568616833333, 288405083333, 139081166666, 71026000000, 36318843750, 18541651041, 9076617187, 4409654947, 2331464843, 1187051106, 590145833, 297151855, 153936482, 83885152, 45887410, 30268315, 18033208, 12434319, 9713795, 8318701, 7593023, 0, 0, 0 }
    };

    // TODO: performance of INF horizon
    int64 horizon = INT64_MAX - 1;

    struct Task {
        sat::IntervalVar p_interval;
        sat::IntervalVar io_interval;
        int64 block_len;
    };

    std::vector<sat::IntervalVar> all_p_intervals;
    std::vector<sat::IntVar> all_io_ends;

    std::vector<std::vector<sat::IntervalVar>> per_device_intervals(devices.size());

    std::vector<std::vector<std::vector<Task>>> all_tasks(processors.size());
    long task_count = 0;

    std::vector<sat::BoolVar> all_chosen;
    std::vector<int64> all_block_sizes;

    sat::CpModelBuilder cp_model;
    Domain domain(0, horizon);
    for (int proc_id = 0; proc_id < processors.size(); proc_id++)
    {
        if (sec_levels[proc_id] != SEC_LEVEL)
            continue;

        all_tasks[proc_id] = std::vector<std::vector<Task>>(blocks.size());
        for (int block_id = 0; block_id < blocks.size(); block_id++)
        {
            if (processors[proc_id][block_id] == 0 || blocks[block_id] > FILE_SIZE)
                continue;
            all_tasks[proc_id][block_id] = std::vector<Task>(devices.size());
            for (int device_id = 0; device_id < devices.size(); device_id++)
            {

                std::stringstream ss;
                ss << "_" << block_id << "_" << proc_id << "_" << device_id;
                sat::BoolVar chosen = cp_model.NewBoolVar().WithName("chosen" + ss.str());
                all_chosen.push_back(chosen);
                all_block_sizes.push_back(blocks[block_id]);

                sat::IntVar p_time = cp_model.NewConstant(blocks[block_id] * processors[proc_id][block_id]);
                sat::IntVar p_start = cp_model.NewIntVar(domain).WithName("p_start" + ss.str());
                sat::IntVar p_end = cp_model.NewIntVar(domain).WithName("p_end" + ss.str());
                sat::IntervalVar p_interval = cp_model.NewOptionalIntervalVar(p_start, p_time, p_end, chosen).WithName("p_interval" + ss.str());

                all_p_intervals.push_back(p_interval);

                sat::IntVar io_time = cp_model.NewConstant(blocks[block_id] * devices[device_id]);
                sat::IntVar io_start = cp_model.NewIntVar(domain).WithName("io_start" + ss.str());
                sat::IntVar io_end = cp_model.NewIntVar(domain).WithName("io_end" + ss.str());
                sat::IntervalVar io_interval = cp_model.NewOptionalIntervalVar(io_start, io_time, io_end, chosen).WithName("io_interval" + ss.str());

                all_io_ends.push_back(io_end);
                per_device_intervals[device_id].push_back(io_interval);

                all_tasks[proc_id][block_id][device_id] = Task{p_interval, io_interval, blocks[block_id]};
                task_count++;

                /// Precedence constraint
                cp_model.AddGreaterOrEqual(io_start, p_end).OnlyEnforceIf(chosen);
            }
        }
    }

    std::cout << "Finished preparing data" << std::endl;
    std::cout << "\tConsidering " << task_count << " tasks" << std::endl;

    /// Constraints
    cp_model.AddNoOverlap(all_p_intervals);
    for (int device_id = 0; device_id < devices.size(); device_id++)
    {
        cp_model.AddNoOverlap(per_device_intervals[device_id]);
    }

    cp_model.AddEquality(sat::LinearExpr::BooleanScalProd(all_chosen, all_block_sizes), FILE_SIZE);

    /// Objective
    sat::IntVar obj_var = cp_model.NewIntVar(domain).WithName("makespan");
    cp_model.AddMaxEquality(obj_var, all_io_ends);
    cp_model.Minimize(obj_var);

    /// Solver
    sat::CpModelProto model_proto = cp_model.Build();
    sat::CpSolverResponse response = sat::Solve(model_proto);
    std::cout << sat::CpSolverResponseStats(response) << std::endl;

    if (response.status() == sat::CpSolverStatus::OPTIMAL || response.status() == sat::CpSolverStatus::FEASIBLE)
    {
        std::cout << "Optimal Schedule Length: " << sat::SolutionIntegerValue(response, obj_var) << "\n";
        std::stringstream processor_tasks;
        for (int proc_id = 0; proc_id < processors.size(); proc_id++)
        {
            if (sec_levels[proc_id] != SEC_LEVEL)
                continue;

            for (int device_id = 0; device_id < devices.size(); device_id++)
            {
                std::stringstream chosen_blocks;
                std::stringstream proc_times;
                bool print = false;
                for (int block_id = 0; block_id < blocks.size(); block_id++)
                {
                    if (processors[proc_id][block_id] == 0 || blocks[block_id] > FILE_SIZE)
                        continue;

                    auto &task = all_tasks[proc_id][block_id][device_id];
                    if (!sat::SolutionBooleanValue(response, task.p_interval.PresenceBoolVar()))
                    {
                        continue;
                    }
                    print = true;

                    std::string blstr = "block " + std::to_string(task.block_len) + " B";
                    chosen_blocks << std::setw(-30) << blstr;

                    std::stringstream times;
                    times << "p: ["
                          << sat::SolutionIntegerValue(response, task.p_interval.StartVar()) << ", "
                          << sat::SolutionIntegerValue(response, task.p_interval.EndVar()) << "] ";

                    times << "io: ["
                          << sat::SolutionIntegerValue(response, task.io_interval.StartVar()) << ", "
                          << sat::SolutionIntegerValue(response, task.io_interval.EndVar()) << "]";

                    proc_times <<  std::setw(-30) << times.str();
                }
                if (print)
                {
                    processor_tasks << "Processor " << cipher_names[proc_id] << " by " << device_id << " : \n";
                    processor_tasks << chosen_blocks.str() << "\n" << proc_times.str() << "\n";
                }
            }
        }


        std::cout << processor_tasks.str() << std::endl;

        SUCCEED();
        return;
    }

    FAIL();
}