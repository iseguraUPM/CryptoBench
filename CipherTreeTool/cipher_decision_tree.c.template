#include "cipher_decision_tree.h"

#include <iostream>
#include <iomanip>

const int TREE_SIZE = %%tree_size%%;

static struct
{
    std::string type;
    int size;
    int sec;
    std::string lib;
    std::string alg;
    int key_len;
    std::string mode;
} decision_tree [] = {
    %%tree_data%%
};

static void printRecursive(int leaf_idx, int level)
{
    if (leaf_idx >= TREE_SIZE)
        return;

    std::stringstream ss;
    ss << std::string(level, '\t');

    auto node = decision_tree[leaf_idx];
    if (node.type == "size")
    {
        ss << "SIZE: LESS OR EQ. THAN " << node.size << " OR GREATER THAN " << node.size << "\n";
    }
    else if (node.type == "security")
    {
        ss << "SEC: LESS OR EQ. THAN " << node.sec << " OR GREATER THAN " << node.sec << "\n";
    }
    else if (node.type == "cipher")
    {
        ss << node.lib << " " << node.alg << "-" << node.key_len << "-" << node.mode << "\n";
    }
    else {
        return;
    }

    std::cout << ss.str();

    printRecursive(2 * leaf_idx + 1, level + 1);
    printRecursive(2 * leaf_idx + 2, level + 1);
}

void printTree()
{
    printRecursive(0, 0);
}

int findCipher(int file_size, int sec_level, struct CipherInfo &cipher)
{
    int leaf_idx = 0;
    while (leaf_idx < TREE_SIZE)
    {
        if (decision_tree[leaf_idx].type == "none")
            return 0;

        if (decision_tree[leaf_idx].type == "size")
        {
            if (decision_tree[leaf_idx].size >= file_size)
                leaf_idx = 2 * leaf_idx + 1;
            else
                leaf_idx = 2 * leaf_idx + 2;
        }
        else if (decision_tree[leaf_idx].type == "security")
        {
            if (decision_tree[leaf_idx].sec >= sec_level)
                leaf_idx = 2 * leaf_idx + 1;
            else
                leaf_idx = 2 * leaf_idx + 2;
        }
        else if (decision_tree[leaf_idx].type == "cipher")
        {
            cipher.lib = decision_tree[leaf_idx].lib;
            cipher.alg = decision_tree[leaf_idx].alg;
            cipher.key_bits = decision_tree[leaf_idx].key_len;
            cipher.mode = decision_tree[leaf_idx].mode;
        }
        else {
            return 0;
        }
    }

    return 0;
}